rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && 
             timestamp <= request.time && 
             timestamp > timestamp.date(2020, 1, 1);
    }
    
    function isValidString(str, maxLength) {
      return str is string && 
             str.size() > 0 && 
             str.size() <= maxLength;
    }
    
    function isValidArray(arr, maxSize) {
      return arr is list && 
             arr.size() <= maxSize;
    }
    
    function isRecentRequest() {
      return request.time > resource.data.updatedAt + duration.value(1, 's');
    }
    
    // Rate limiting helper
    function isNotSpamming() {
      return request.time > resource.data.createdAt + duration.value(5, 's');
    }

    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isAdmin();
    }

    // Habits collection - users can only access their own habits
    match /habits/{habitId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isValidString(resource.data.title, 100) &&
        isValidString(resource.data.description, 500) &&
        isValidArray(resource.data.completedDates, 365) &&
        isValidTimestamp(resource.data.createdAt) &&
        isValidTimestamp(resource.data.updatedAt);
      
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.title, 100) &&
        isValidString(request.resource.data.description, 500) &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.title, 100) &&
        isValidString(request.resource.data.description, 500) &&
        request.resource.data.updatedAt == request.time &&
        isRecentRequest();
    }

    // Tasks collection - users can only access their own tasks
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isValidString(resource.data.title, 100) &&
        isValidString(resource.data.description, 1000) &&
        isValidArray(resource.data.tags, 10) &&
        isValidTimestamp(resource.data.dueDate) &&
        isValidTimestamp(resource.data.createdAt) &&
        isValidTimestamp(resource.data.updatedAt);
      
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.title, 100) &&
        isValidString(request.resource.data.description, 1000) &&
        isValidArray(request.resource.data.tags, 10) &&
        request.resource.data.dueDate >= request.time &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.title, 100) &&
        isValidString(request.resource.data.description, 1000) &&
        isValidArray(request.resource.data.tags, 10) &&
        request.resource.data.updatedAt == request.time &&
        isRecentRequest();
    }

    // Journal entries - users can only access their own entries
    match /journal/{entryId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isValidString(resource.data.content, 2000) &&
        isValidString(resource.data.mood, 20) &&
        isValidTimestamp(resource.data.date) &&
        isValidTimestamp(resource.data.createdAt) &&
        isValidTimestamp(resource.data.updatedAt);
      
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.content, 2000) &&
        isValidString(request.resource.data.mood, 20) &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.content, 2000) &&
        isValidString(request.resource.data.mood, 20) &&
        request.resource.data.updatedAt == request.time &&
        isRecentRequest();
    }

    // Weekly reviews - users can only access their own reviews
    match /reviews/{reviewId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isValidString(resource.data.content, 5000) &&
        isValidTimestamp(resource.data.weekStart) &&
        isValidTimestamp(resource.data.createdAt) &&
        isValidTimestamp(resource.data.updatedAt);
      
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.content, 5000) &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId) &&
        isOwner(request.resource.data.userId) &&
        isValidString(request.resource.data.content, 5000) &&
        request.resource.data.updatedAt == request.time &&
        isRecentRequest();
    }

    // Licenses - users can only access their own license
    match /licenses/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isAdmin();
    }

    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // Analytics - users can only access their own analytics
    match /analytics/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isAdmin();
    }

    // Rate limiting for rapid writes
    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 